// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODELS
model User {
  id Int @id @default(autoincrement())
  firstname String @db.VarChar(50)
  lastname String @db.VarChar(50)
  email String @unique @db.VarChar(100)
  password String @db.VarChar(255)
  instrument Instrument[]
  createdAt DateTime? @default(now())
  id_plan Int? @db.Integer
  is_archived Boolean? @default(false)
  points_forums Int? @db.Integer
  points_courses Int? @db.Integer
  tiktok_token String? @unique
  tiktok_username String? @unique

  // Many to many
  challenge Challenge[]
  topic Topic[]
  topic_reaction Topic_reaction[]
  message Message[]
  message_reaction Message_reaction[]
  note Note[]
}

model Role {
  id Int @id @default(autoincrement())
}

model Ban {
  id Int @id @default(autoincrement())
}

// PLAN MODELS
model Plan {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  description String @db.Text
  price Float
}

// CHALLENGE MODELS
model Challenge {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  id_instrument Int
  date_start DateTime
  date_end DateTime
  description String @db.Text
  hashtag String @db.VarChar(255)

  // Many to many
  user User[]
}

model Results_snapshot {
  id Int @id @default(autoincrement())
}

// CATEGORY MODELS
model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  content String @db.VarChar(255)
  instrument Instrument[]

}

model Instrument {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}



model User_course {
  id Int @id @default(autoincrement())
}

model User_lesson {
  id Int @id @default(autoincrement())
}


// FORUM MODELS
model Section {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  order Int
}

model Topic {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  createdAt DateTime @default(now())
  like_count Int @default(0)
  flag_count Int @default(0)

  // One
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  // Many
  topic_reaction Topic_reaction[]
}

model Topic_reaction {
  is_liked Boolean @default(false)
  is_flagged Boolean @default(false)

  // One
  user User @relation(fields: [userId], references: [id])
  userId Int
  topic Topic @relation(fields: [topicId], references: [id])
  topicId Int

  @@id([userId, topicId])
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  content String @db.Text
  like_count Int @default(0)
  flag_count Int @default(0)

  // One
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  // Many
  message_reaction Message_reaction[]
}

model Message_reaction {
  is_liked Boolean @default(false)
  is_flagged Boolean @default(false)

  // One
  user User @relation(fields: [userId], references: [id])
  userId Int
  message Message @relation(fields: [messageId], references: [id])
  messageId Int

  @@id([userId, messageId])
}

// OTHER MODELS
model Infos_bulle {
  id Int @id @default(autoincrement())
  name String  @db.VarChar(255)
  icon String @db.Text
  content  String @db.Text
  date_start DateTime
  date_end DateTime
}

// COURSE MODELS
model Course {
  id Int @id @default(autoincrement())
  name String  @db.VarChar(255)
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many to many
  lesson Lesson[]
  badge Badge[]
  note Note[]
}

model Lesson {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Int
  points Int

  // One to many
  courseId Int
  course Course @relation(fields: [courseId], references: [id])

  videoId Int
  video Video @relation(fields: [videoId], references: [id])

  // Many to many
  media Media[]
  note Note[]
}

model Media {
  id Int @id @default(autoincrement())
  file String // CHANGER AVEC FILE => lire doc Prisma

  // Many to many
  lesson Lesson[]
}

model Video {
  id Int @id @default(autoincrement())
  link String

  // Many to many
  lesson Lesson[]
  timestamp Timestamp[]
}

model Timestamp {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  description String
  value String @db.VarChar(50)

  // Many to many
  video Video[]
}

model Badge {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String @db.VarChar(255)
  points Int
  display_img String

  // Many to many
  course Course[]
}

model Note {
  user User @relation(fields: [userId], references: [id])
  userId Int
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int

  updatedAt DateTime @updatedAt
  content String @db.Text

  @@id([userId, courseId, lessonId])
}
